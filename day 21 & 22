
ðŸ“Œ **What I learned:**

#### ðŸ”¹ SQL Joins Refresher:
- **INNER JOIN** â€“ fetches matching rows from both tables
- **LEFT JOIN** â€“ all rows from left table + matched rows from right
- **RIGHT JOIN** â€“ all rows from right table + matched rows from left
- **FULL JOIN / OUTER JOIN** â€“ all rows when there's a match in either table
- **CROSS JOIN** â€“ every combination of rows (Cartesian product)

#### ðŸ”¹ Spring Boot + MySQL Integration:
- Connected two or more tables (e.g., `Employee` and `Department`)
- Used `@OneToMany`, `@ManyToOne` and `@JoinColumn` annotations for relationships
- Learned how to write **custom queries using JPQL** and native SQL in Spring Boot
- Retrieved joined data via Spring JPA repositories

#### ðŸ”¹ Real-Time Implementation:
- Fetched data using:
  - `@Query` annotation in Repository
  - Native SQL and JPQL
- Used Postman to test joined data responses via REST APIs

---

ðŸ§ª **Practice Example:**
- Tables: `Employees`, `Departments`
- Query: Get all employees with their department names
```java
@Query("SELECT e.name, d.deptName FROM Employee e JOIN e.department d")
List<Object[]> getEmployeeWithDepartments();
