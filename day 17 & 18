 Day 17 & 18: Spring Data JPA + Database Integration

**What I learned:**
- Introduction to **Spring Data JPA**: powerful abstraction over JDBC.
- Connected Java application to:
  - In-memory database (**H2**) for quick testing
  - Relational database (**MySQL**) for persistent data storage
- Understood how JPA simplifies CRUD operations with minimal boilerplate.

**Key Annotations & Concepts:**
- `@Entity` â€“ marked a Java class as a JPA entity (mapped to a database table)
- `@Id` and `@GeneratedValue` â€“ for primary key setup
- `@Repository` â€“ to define a DAO layer (interface) that Spring auto-implements
- `CrudRepository`, `JpaRepository` â€“ extended interfaces for DB operation.
- `application.properties` â€“ configured DB credentials and JPA settings

**Hands-on Practice:**
- Created a model/entity class (e.g., `User`, `Product`)
- Linked to MySQL and verified DB table creation
- Used `save()`, `findAll()`, `findById()`, and `deleteById()` methods
- Tested API endpoints with **Postman**

ðŸ›  **Outcome:**
- Successfully performed full **CRUD operations** using JPA.
- Gained real-time experience in creating production-like backend logic.
- Built a base for future REST APIs and enterprise-level applications.
